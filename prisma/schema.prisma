// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String    @unique
  clerkId   String    @unique
  role      Role      @default(USER)
  user      User? // Relation to the User model
  promoter  Promoter? // Relation to the Promoter model
  createdAt DateTime  @default(now())
}

enum Role {
  USER
  PROMOTER
}

model User {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId  String     @unique @db.Uuid
  profile    Profile    @relation(fields: [profileId], references: [id])
  referredBy String?    @db.Uuid // If referred by a promoter
  purchases  Purchase[] // One-to-many relation: A user can have multiple purchases
  createdAt  DateTime   @default(now())
}

model Promoter {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String     @unique @db.Uuid // Foreign key
  profile   Profile    @relation(fields: [profileId], references: [id])
  refId     String     @unique // Unique referral code for the promoter
  leads     Lead[] // Leads generated by this promoter
  purchases Purchase[]
  createdAt DateTime   @default(now())
}

model Lead {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String   @unique
  promoterId String   @db.Uuid // Foreign key to the promoter
  promoter   Promoter @relation(fields: [promoterId], references: [id])
  createdAt  DateTime @default(now())
}

model Purchase {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @db.Uuid // Foreign key to the user who made the purchase
  user       User      @relation(fields: [userId], references: [id]) // One-to-many relationship with User
  promoterId String?   @db.Uuid // Foreign key to the promoter (nullable)
  promoter   Promoter? @relation(fields: [promoterId], references: [id])
  amount     Float // Purchase amount
  stripeId   String // Stripe transaction ID
  createdAt  DateTime  @default(now())
}

model Test {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}
